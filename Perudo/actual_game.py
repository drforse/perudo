from config import active_games, groups_col, users_col, bot
from aiogram import types
import random

dices_values = [1, 2, 3, 4, 5, 6]


async def open_game(chat_id, user_id, bet):
    active_games.insert_one({'group': chat_id,
                             'players': [user_id],
                             'status': 'recruitment',
                             'creator': user_id,
                             'round': 0,
                             str(user_id): {'bet': int(bet)}})


async def start(chat_id, user_id):
    game_doc = active_games.find_one({'group': chat_id})
    players = game_doc['players']
    players_usernames = ''
    for player in players:
        game_doc[str(player)].update({'dices': await flip_dices()})
        member = await bot.get_chat_member(chat_id, player)
        if game_doc['creator'] == player:
            end = '(!) '
        else:
            end = ' '
        if member.user.username:
            players_usernames += '@' + member.user.username + end
        else:
            players_usernames += member.user.first_name + end
    game_doc['status'] = 'started'
    game_doc['current_player'] = game_doc['creator']
    active_games.replace_one({'group': chat_id},
                             game_doc)
    await bot.send_message(chat_id, '–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ö–∏–¥–∞–µ–º –∫–æ—Å—Ç–∏.')
    await bot.send_message(chat_id, players_usernames)
    await bot.send_message(chat_id, '–î–µ–ª–∞–π—Ç–µ –≤–∞—à–∏ —Å—Ç–∞–≤–∫–∏!')


async def join(chat_id, user_id, bet=None):
    game = active_games.find_one({'group': chat_id})
    if not game:
        return '–ò–≥—Ä–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)0))\n–°–æ–∑–¥–∞—Ç—å: /perudo <—Å—Ç–∞–≤–∫–∞>'
    if user_id in game['players']:
        return '–ß–µ —Ç—ã —Ö–æ—á–µ—à—å, –∞? –¢–µ–±—è –£–ñ–ï –ø—Ä–∏–Ω—è–ª–∏ –≤ –∏–≥—Ä—É!!\n' \
               '–ù–∞—á–∞—Ç—å: /perudo\n –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: /pjoin <—Å—Ç–∞–≤–∫–∞>'
    if game['status'] != 'recruitment':
        return '–ú—ã —Ç—É—Ç —É–∂–µ –∏–≥—Ä–∞–µ–º, –æ–±–æ–∂–¥–∏!'

    if not bet:
        creator = game['creator']
        bet = game[str(creator)]['bet']

    active_games.update_one({'group': chat_id},
                            {'$push': {'players': user_id}})
    active_games.update_one({'group': chat_id},
                            {'$set': {str(user_id): {'bet': int(bet)}}})
    years_left = users_col.find_one({'user_id': user_id})['years']
    if years_left == 0:
        return f'–ß—Ç–æ, —Å–≤–æ–±–æ–¥–∞ –Ω–∞–¥–æ–µ–ª–∞? –ù—É –¥–∞–≤–∞–π, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è.\n–°—Ç–∞–≤–∫–∞: {bet}\n–ù–∞—á–∞—Ç—å –∏–≥—Ä—É: /perudo'
    if years_left < 40:
        return (f'–ß—Ç–æ, —Å–ª–∏—à–∫–æ–º —É–∂ —Å–∫–æ—Ä–æ —Ç–µ–±–µ –ø–æ–∫–∏–¥–∞—Ç—å –ì–æ–ª–ª–∞–Ω–¥–µ—Ü, —Ä–µ—à–∏–ª –∑–∞—Ç—è–Ω—É—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ? –ù—É –¥–∞–≤–∞–π, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è.\n'
                f'–°—Ç–∞–≤–∫–∞: {bet}\n–ù–∞—á–∞—Ç—å –∏–≥—Ä—É: /perudo')
    if years_left > 40:
        return (f'–ß—Ç–æ, –Ω–∞–¥–µ–µ—à—å—Å—è –≤—ã–∏–≥—Ä–∞—Ç—å –ø–∞—Ä—É –ª–µ—Ç —Å–≤–æ–±–æ–¥—ã? –ù—É —É–¥–∞—á–∏! üòà\n'
                f'–°—Ç–∞–≤–∫–∞: {bet}\n–ù–∞—á–∞—Ç—å –∏–≥—Ä—É: /perudo')


async def make_stake(chat_id, user_id, stake):
    game = active_games.find_one({'group': chat_id})
    if not game:
        return
    if game['current_player'] != user_id:
        return
    dices_global_quant = len(game['players'])*5
    if 'last_stake' in game:
        last_stake = game['last_stake']
        if stake['dice_quant'] < last_stake['dice_quant']:
            return '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ –≤ —Å—Ç–∞–≤–∫–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —É–º–µ–Ω—å—à–∞—Ç—å—Å—è'
        elif stake['dice_quant'] == last_stake['dice_quant']:
            if stake['dice_value'] <= last_stake['dice_value']:
                return '–ù–æ–º–∏–Ω–∞–ª –∫—É–±–∏–∫–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ, —á–µ–º –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç–∞–≤–∫–µ, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ!'
    if stake['dice_quant'] > dices_global_quant:
        return '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ –Ω–∞ —Å—Ç–æ–ª–µ!'
    if stake['dice_value'] > 6:
        return '–ö—É–±–∏–∫–∏ —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã–µ, –ª–æ–ª!'
    player = game[str(user_id)]
    player['stake'] = stake
    active_games.update_one({'group': chat_id},
                            {'$set': {str(user_id): player}})
    active_games.update_one({'group': chat_id},
                            {'$set': {'last_stake': stake}})
    active_games.update_one({'group': chat_id},
                            {'$set': {'last_player': user_id}})
    next_player = game['players'].index(game['current_player'])
    try:
        next_player = game['players'][next_player+1]
    except IndexError:
        next_player = game['players'][0]
        active_games.update_one({'group': chat_id},
                                {'$inc': {'round': 1}})
    active_games.update_one({'group': chat_id},
                            {'$set': {'current_player': next_player}})
    x = 0
    del player['stake']
    for player in game['players']:
        if 'stake' not in game[str(player)]:
            x += 1
    if x == 1 and game['round'] == 0:
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É–±–∏–∫–∏', callback_data='dices'))
        await bot.send_message(chat_id=chat_id,
                               text='–ü–µ—Ä–≤—ã–π –∫–æ–Ω –æ–∫–æ–Ω—á–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤—Ç–æ—Ä–æ–π –∫–æ–Ω, –∏–≥—Ä–æ–∫–∏, —Ç–µ–ø–µ—Ä—å –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ –∫—É–±–∏–∫–∏',
                               reply_markup=kb)
    member = await bot.get_chat_member(chat_id, next_player)
    return f'–¢–µ–ø–µ—Ä—å —Ö–æ–¥–∏—Ç @{member.user.username}'


async def show_dices(call_id, chat_id, user_id):
    game = active_games.find_one({'group': chat_id})
    if not game:
        return
    if user_id not in game['players']:
        await bot.answer_callback_query(call_id, '–¢—ã –Ω–µ –∏–≥—Ä–∞–µ—à—å, –∏ –±—É—Ç—ã–ª–∫–∞ —Ä–æ–º–∞!')
    else:
        dices = str(game[str(user_id)]['dices']).replace('[', '').replace(']', '')
        await bot.answer_callback_query(call_id, dices, show_alert=True)


async def call_liar(chat_id, user_id):
    game = active_games.find_one({'group': chat_id})
    if not game:
        return '–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞.'
    if game['status'] != 'started':
        return '–ò–≥—Ä–∞ –µ—â–µ –¥–∞–∂–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å!'
    if 'last_player' not in game:
        return '–ù–µ–∫–æ–≥–æ –æ–±–≤–∏–Ω—è—Ç—å, –Ω–∏–∫—Ç–æ –µ—â—ë –Ω–µ –ø–æ—Ö–æ–¥–∏–ª'
    if user_id != game['current_player']:
        return '–ù–µ —Ç–≤–æ–π —Ö–æ–¥, —Å–∞–ª–∞–≥–∞!'
    last_player = game['last_player']
    last_stake = game['last_stake']
    all_dices = []
    for player in game['players']:
        all_dices += game[str(player)]['dices']
    count_dices = all_dices.count(last_stake['dice_value'])
    member_lier = await bot.get_chat_member(chat_id, last_player)
    member_prosecutor = await bot.get_chat_member(chat_id, user_id)
    active_games.delete_one({'group': chat_id})
    results = await get_game_results(game)

    if count_dices >= last_stake['dice_quant']:
        loser = member_prosecutor.user
        member_lier = f'@{member_lier.user.username}' if member_lier.user.username else member_lier.user.first_name
        member_prosecutor = f'@{member_prosecutor.user.username}' if member_prosecutor.user.username else member_prosecutor.user.first_name
        text = f'{member_lier} –Ω–µ –≤—Ä–∞–ª! {member_prosecutor} –ø—Ä–æ–∏–≥—Ä–∞–ª!\n\n{results}'
    else:
        loser = member_lier.user
        member_lier = f'@{member_lier.user.username}' if member_lier.user.username else member_lier.user.first_name
        text = f'{member_lier} —Å–æ–≤—Ä–∞–ª –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª!\n\n{results}'

    all_bets = 0
    for player in game['players']:
        years_left = users_col.find_one({'user_id': player})['years']
        bet = game[str(player)]['bet']
        if player == loser.id:
            all_bets += bet
        else:
            all_bets += bet
            new_years_left = years_left - bet if years_left - bet >= 0 else 0
            users_col.update_one({'user_id': player},
                                 {'$set': {'years': new_years_left}})
        users_col.update_one({'user_id': player},
                             {'$inc': {'games_finished': 1}})

    users_col.update_one({'user_id': loser.id},
                         {'$inc': {'loses': 1}})
    years_left = users_col.find_one({'user_id': loser.id})['years']
    new_years_left = years_left + all_bets
    users_col.update_one({'user_id': loser.id},
                         {'$set': {'years': new_years_left}})

    return text


async def pabort(chat_id, user_id):
    game = active_games.find_one({'group': chat_id})
    member = await bot.get_chat_member(chat_id, user_id)
    if not game:
        return '–î–∞ –º—ã –≤ –æ–±—â–µ–º-—Ç–æ –∏ –Ω–µ —Å–æ–±–∏—Ä–∞–ª–∏—Å—å –∏–≥—Ä–∞—Ç—å, –¥–∞–≤–∞–π –ª—É—á—à–µ –≤—ã–ø—å–µ–º!'
    if user_id != game['creator'] and member.status not in ['creator', 'administrator']:
        return '–ò–≥—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –µ–µ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∏–ª–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–º –∫–æ—Ä–∞–±–ª—è –∏ –µ–≥–æ –±–ª–∏–∂–∞–π—à–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏!'
    active_games.delete_one({'group': chat_id})
    if game['status'] == 'started':
        return '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!'
    else:
        return '–ù–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω, –≤—Å–µ —Ä–∞–∑–æ—à–ª–∏—Å—å'


async def flip_dices():
    dices = []
    for i in range(0, 5):
        dices.append(random.randint(1, 6))
    return dices


async def get_game_results(game):
    players = {}
    for player in game['players']:
        players[str(player)] = game[str(player)]
    results = '–ö—É–±–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:\n'
    for player in players:
        player_username = await bot.get_chat_member(game['group'], player)
        player_username = player_username.user.username
        dices = str(game[player]['dices']).replace('[', '').replace(']', '').replace(str(game['last_stake']['dice_value']),
                                                                                     f'<b>{game["last_stake"]["dice_value"]}</b>')
        results += player_username + ': ' + dices + '\n'
    return results
