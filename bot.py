import traceback
import asyncio
import logging
from aiogram import executor
from aiogram.utils import exceptions
from aiogram.utils.executor import start_webhook
from config import active_games, users_col, groups_col, bot, dp
from Perudo import actual_game
import random

loop = asyncio.get_event_loop()
logging.basicConfig(level=logging.WARNING)

developers = [500238135]


async def check_group_and_user(chat_id, user_id):
    group = groups_col.find_one({'group_id': chat_id})
    if not group:
        groups_col.insert_one({'group_id': chat_id,
                               'users': [user_id]})
        group = groups_col.find_one({'group_id': chat_id})
    user = users_col.find_one({'user_id': user_id})
    if not user:
        users_col.insert_one({'user_id': user_id,
                              'years': 100,
                              'games_finished': 0,
                              'loses': 0})
    if user_id not in group['users']:
        groups_col.update_one({'group_id': chat_id},
                              {'$push': {'users': user_id}})


@dp.message_handler(commands=['start'])
async def start_react(m):
    await check_group_and_user(m.chat.id, m.from_user.id)

    await bot.send_message(m.chat.id, '–ü—Ä–∏–≤–µ—Ç, —á–µ –∫–∞–∫, —è –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –ü–ï–†–£–î–û - –ò–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏ –ø–æ –≤–µ—Ä—Å–∏–∏ –ü–∏—Ä–∞—Ç–æ–≤ '
                                      '–ö–∞—Ä–∏–±—Å–∫–æ–≥–æ –ú–æ—Ä—è ‚ò†Ô∏è, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã –í—ã –º–æ–∂–µ—Ç–µ —É –∑–Ω–∞—Ç—å –≤ –•–µ–ª–ø–µ! /help')


@dp.message_handler(commands=['stats'])
async def get_stats(m):
    await check_group_and_user(m.chat.id, m.from_user.id)

    user_doc = users_col.find_one({'user_id': m.from_user.id})
    member = await bot.get_chat_member(m.chat.id, m.from_user.id)
    name = member.user.first_name
    years_left = user_doc["years"] if user_doc["years"] != 0 else '–°–≤–æ–±–æ–¥–µ–Ω!'
    stats = f'*{name}*:\n' \
            f'–û—Å—Ç–∞–≤—à–∏–µ—Å—è –≥–æ–¥—ã —Å–ª—É–∂–±—ã: {years_left}\n' \
            f'–í—Å–µ–≥–æ –∏–≥—Ä: {user_doc["games_finished"]}\n' \
            f'–ü—Ä–æ–∏–≥—Ä—ã—à–∏: {user_doc["loses"]}'

    try:
        await bot.send_message(m.chat.id, stats, reply_to_message_id=m.message_id, parse_mode='markdown')
    except exceptions.MessageToReplyNotFound:
        await bot.send_message(m.chat.id, stats, parse_mode='markdown')


@dp.message_handler(commands=['help'])
async def help(m):
    await check_group_and_user(m.chat.id, m.from_user.id)

    help = '–ü–ï–†–£–î–û - –ò–ì–†–ê –í –ö–û–°–¢–ò (–∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è "–ø–∏—Ä–∞—Ç–æ–≤ –∫–∞—Ä–∏–±—Å–∫–æ–≥–æ –º–æ—Ä—è")\n' \
           '–í –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã –≤—Å–µ–º –≤—ã–¥–∞–µ—Ç—Å—è –ø–æ 5 –∫—É–±–∏–∫–æ–≤, –∫—É–±–∏–∫–∏ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è.\n' \
           '–ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –Ω–∞–∑—ã–≤–∞—é—Ç —Å—Ç–∞–≤–∫—É (–∫–æ–ª-–≤–æ –∫—É–±–∏–∫–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞ –Ω–∞ —Å—Ç–æ–ª–µ).' \
           '–ö–æ–ª-–≤–æ –∫—É–±–∏–∫–æ–≤ –≤ —Å—Ç–∞–≤–∫–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫—É–±–∏–∫–æ–≤ –Ω–∞ —Å—Ç–æ–ª–µ.\n'\
           '–°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ª–∏–±–æ –ø–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞–≤–∫—É , –ª–∏–±–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–æ–≤—Ä–∞–ª.' \
           ' –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–≥—Ä–æ–∫ —Å–æ–≤—Ä–∞–ª, —Ç–æ –æ–Ω –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º' \
           '—Å–ª—É—á–∞–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –æ–±–≤–∏–Ω–∏—Ç–µ–ª—å.\n' \
           '–ò–≥—Ä–æ–∫ –≤—Ä–µ—Ç, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ –Ω–∞–∑–≤–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞ –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ –∂–µ –±–æ–ª—å—à–µ –∏–ª–∏ —Å—Ç–æ–ª—å–∫–æ –∂–µ,' \
           '—Ç–æ –∏–≥—Ä–æ–∫ –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–∞–≤–¥—É.\n' \
           '–í –ø–µ—Ä–≤—ã–π –∫–æ–Ω –Ω–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç –Ω–∏—á—å–∏—Ö –∫—É–±–∏–∫–æ–≤, –≤–æ –≤—Ç–æ—Ä–æ–π –∫–æ–Ω –≤—Å–µ –∏–≥—Ä–æ–∫–∏ —É–∑–Ω–∞—é—Ç —Å–≤–æ–∏ –∫—É–±–∏–∫–∏.\n\n' \
           '–ü–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏: –ù–∞–¥–æ –ø–æ–≤—ã—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∏–ª–∏ –Ω–æ–º–∏–Ω–∞–ª, –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ - –Ω–æ–º–∏–Ω–∞–ª –º–æ–∂–Ω–æ' \
           ' –∏–∑–º–µ–Ω—è—Ç—å –∫–∞–∫ —É–≥–æ–¥–Ω–æ, –µ—Å–ª–∏ –Ω–µ –ø–æ–≤—ã—à–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–æ –Ω–æ–º–∏–Ω–∞–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã—à–µ,' \
           ' –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–≤—ã—à–∞—Ç—å!' \
           '/perudo - –Ω–∞—á–∞—Ç—å –Ω–∞–±–æ—Ä –∏–≥—Ä—É, –∏–ª–∏ —Å–∞–º—É –∏–≥—Ä—É\n' \
           '/pjoin - –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\n' \
           '/call_liar - –æ–±–≤–∏–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤–æ –ª–∂–∏\n' \
           '/pabort - –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∏–≥—Ä—É'
    await bot.send_message(m.chat.id, help)


@dp.message_handler(commands=['adventure'])
async def get_in_adventure(m):
    await check_group_and_user(m.chat.id, m.from_user.id)

    user_doc = users_col.find_one({'user_id': m.from_user.id})
    last_adventure = user_doc.get('last_adventure')
    if not last_adventure:
        last_adventure = 0
    date = m.date.timestamp()
    if date - last_adventure < 60*60:
        await bot.send_message(m.chat.id, f'–í—ã –µ—â–µ –Ω–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è,'
                                          f' –æ—Å—Ç–∞–ª–æ—Å—å {(date - last_adventure)/60} –º–∏–Ω—É—Ç')
        return

    inc_years = random.randint(0, 150)
    users_col.update_one({'user_id': m.from_user.id},
                         {'$set': {'last_adventure': date}})
    users_col.update_one({'user_id': m.from_user.id},
                         {'$inc': {'years': inc_years}})

    if inc_years == 0:
        await bot.send_message(m.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∏–∑ —Å–≤–æ–µ–≥–æ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –±–∞–π–∫–∞–º–∏ –∏ –∑–æ–ª–æ—Ç–æ–º!,'
                                          '–µ—Å–ª–∏ –ü–∞—Å—é–∫ –±—É–¥–µ—Ç –Ω–µ–ø—Ä–æ—Ç–∏–≤, —Ç–æ –Ω–∞ —ç—Ç–æ—Ç —Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π (1/150) –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, '
                                          '—á—Ç–æ–±—ã –≤ –µ–≥–æ –±–æ—Ç–µ —Å–∫–∞—á–µ–∫ –ø—Ä–∏–±–∞–≤–ª—è–ª–æ—Å—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ —Ö–î–î–î–î–î–î–î–î')
    elif user_doc['years'] == 0:
        await bot.send_message(m.chat.id, f'–ü–æ –Ω–µ–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏ –í—ã –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–∞ –±–æ—Ä—Ç—É –≥–æ–ª–ª–∞–Ω–¥—Ü–∞,'
                                          f' –∏ –¥–æ–ª–∂–Ω—ã –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å {inc_years} –ª–µ—Ç –Ω–∞ –µ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞!')
    else:
        await bot.send_message(m.chat.id, f'–ü–æ –Ω–µ–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏ –í—ã –ø—Ä–∏–±–∞–≤–∏–ª–∏ —Å–µ–±–µ {inc_years}'
                                          f' –ª–µ—Ç –Ω–∞ —Å–ª—É–∂–±–µ –Ω–∞ –±–æ—Ä—Ç—É –≥–æ–ª–ª–∞–Ω–¥—Ü–∞!')


@dp.message_handler(lambda m: m.chat.type != 'private', commands=['perudo'])
async def start_game(m):
    try:
        await check_group_and_user(m.chat.id, m.from_user.id)

        game_doc = active_games.find_one({'group': m.chat.id})
        if not game_doc:
            if len(m.text.split()) != 2:
                await bot.send_message(m.chat.id, '/perudo <—Å—Ç–∞–≤–∫–∞>')
                return
            if not m.text.split()[1].isdigit():
                await bot.send_message(m.chat.id,
                                       '–ù–µ –≤—Å—É—á–∏–≤–∞–π –Ω–∞–º —ç—Ç—É –±–µ–∑–¥–µ–ª–∏—Ü—É, —Å—Ç–∞–≤—å –ì–û–î–´ (—Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º)!')
                return
            bet = m.text.split()[1]
            await actual_game.open_game(m.chat.id, m.from_user.id, bet)
            await bot.send_message(m.chat.id,
                                   '–≠–π –≤—ã —Ç–∞–º, —ç—Ç–æ—Ç —é–Ω–µ—Ü —Ö–æ—á–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–æ—Å—Ç–∏! '
                                   '–ö—Ç–æ —Ö–æ—á–µ—Ç —Å–∫–∏–Ω—É—Ç—å –ø–∞—Ä—É –ª–µ—Ç —Å–ª—É–∂–±—ã –Ω–∞ –ì–æ–ª–ª–∞–Ω–¥—Ü–µ? üòà\n'
                                   '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: /pjoin <—Å—Ç–∞–≤–∫–∞>')
            return
        if game_doc['status'] != 'recruitment':
            await bot.send_message(m.chat.id, '–ú—ã —Ç—É—Ç —É–∂–µ –∏–≥—Ä–∞–µ–º, –æ–±–æ–∂–¥–∏!')
            return
        if m.from_user.id not in game_doc['players']:
            await bot.send_message(m.chat.id, '–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ!\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: /pjoin <—Å—Ç–∞–≤–∫–∞>')
            return
        if len(active_games.find_one({'group': m.chat.id})['players']) == 1:
            await bot.send_message(m.chat.id,
                                   '–¢—ã —Å–æ —Å—Ç–æ–ª–æ–º –∏–≥—Ä–∞—Ç—å —Å–æ–±—Ä–∞–ª—Å—è? –ì–¥–µ —Ç–≤–æ–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏?',
                                   reply_to_message_id=m.message_id)
            return

        await actual_game.start(m.chat.id, m.from_user.id)
    except:
        print(traceback.format_exc())


@dp.message_handler(lambda m: m.chat.type != 'private', commands=['pjoin'])
async def join_game(m):
    await check_group_and_user(m.chat.id, m.from_user.id)

    if len(m.text.split()) != 2:
        text = await actual_game.join(m.chat.id, m.from_user.id)
    elif not m.text.split()[1].isdigit():
        await bot.send_message(m.chat.id, '–ù–µ –≤—Å—É—á–∏–≤–∞–π –Ω–∞–º —ç—Ç—É –±–µ–∑–¥–µ–ª–∏—Ü—É, —Å—Ç–∞–≤—å –ì–û–î–´ (—Å—Ç–∞–≤–∫–∞ –¥–æ–ª–¥–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º)!')
        return
    else:
        bet = m.text.split()[1]
        text = await actual_game.join(m.chat.id, m.from_user.id, bet)
    await bot.send_message(m.chat.id, text, reply_to_message_id=m.message_id)


@dp.message_handler(lambda m: m.chat.type != 'private', commands=['call_liar'])
async def stop_game(m):
    x = await actual_game.call_liar(m.chat.id, m.from_user.id)
    await bot.send_message(m.chat.id, x, parse_mode='html')


@dp.message_handler(lambda m: m.chat.type != 'private', commands=['pabort'])
async def stop_game(m):
    x = await actual_game.pabort(m.chat.id, m.from_user.id)
    await bot.send_message(m.chat.id, x)


@dp.message_handler(lambda m: m.chat.type != 'private' and m.text.replace(' ', '').isdigit(), content_types=['text'])
async def get_stake(m):
    if len(m.text.split()) != 2:
        return
    if not active_games.find_one({'group': m.chat.id}):
        return
    if m.from_user.id not in active_games.find_one({'group': m.chat.id})['players']:
        return
    stake = {'dice_quant': int(m.text.split()[0]),
             'dice_value': int(m.text.split()[1])}
    x = await actual_game.make_stake(m.chat.id, m.from_user.id, stake)
    if x:
        await bot.send_message(m.chat.id, x, reply_to_message_id=m.message_id)


@dp.callback_query_handler(lambda c: c.data == 'dices')
async def get_dices(c):
    await actual_game.show_dices(c.id, c.message.chat.id, c.from_user.id)

executor.start_polling(dp, loop=loop, skip_updates=True)
